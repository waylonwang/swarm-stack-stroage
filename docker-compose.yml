---
# Update Time: 2023-04-05 17:42
version: "3.4"

x-defines:
  service-common: &service-common-ref
    networks: [network_cluster]
    restart: on-failure
  deploy-common: &deploy-common-ref
    mode: replicated
    replicas: 1
  placement-default: &placement-default-ref
    placement:
      constraints:
        - node.labels.type == vm
        - node.labels.storage == true
  driver-common: &driver-common-ref
    type: nfs
    o: addr=${NFS_SERVER},rw,nfsvers=4

services:
  # ------------------------------------------------------------
  # Bitwarden保险库
  # ------------------------------------------------------------
  vaultwarden:
    image: vaultwarden/server:latest
    <<: *service-common-ref
    environment:
      SIGNUPS_ALLOWED: "false"
      INVITATIONS_ALLOWED: "false"
      ADMIN_TOKEN: ${VAULTWARDEN_ADMIN_TOKEN}
      TZ: ${TZ}
    volumes:
      - nfs_vaultwarden:/data
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.vaultwarden.rule=Host(`vaultwarden.${DOMAIN_SWARM}`,`vaultwarden.${DOMAIN_EMERGENCY}`)
        - traefik.http.routers.vaultwarden.entrypoints=websecure
        - traefik.http.routers.vaultwarden.service=vaultwarden
        - traefik.http.routers.vaultwarden.middlewares=normal-chain@file
        - traefik.http.services.vaultwarden.loadbalancer.server.port=80
        - homepage.group=Storage
        - homepage.name=Vault Admin
        - homepage.icon=vaultwarden-light.png #bitwarden.png
        - homepage.href=https://vaultwarden.${DOMAIN_SWARM}:${EXTERNAL_PORT}/
        - homepage.description=密码管理器
        - homepage.siteMonitor=http://vaultwarden
        - homepage.weight=1
      <<: [*deploy-common-ref,*placement-default-ref]
      replicas: 2
    logging:
      driver: fluentd
      options:
        tag: docker.storage.vaultwarden
        fluentd-async-connect: "true"

  # ------------------------------------------------------------
  # Docker私有镜像库
  # ------------------------------------------------------------
  registry:
    image: registry
    <<: *service-common-ref
    ports:
      # 内网直接访问端口
      - 5000:5000
    environment:
      # 启用mirror模式，但会导致无法push，仅standalone模式可以push，如需push须临时注释REGISTRY_PROXY_REMOTEURL后部署
      REGISTRY_PROXY_REMOTEURL: ${REGISTRY_PROXY_REMOTEURL}
      REGISTRY_PROXY_USERNAME: ${REGISTRY_PROXY_USERNAME}
      REGISTRY_PROXY_PASSWORD: ${REGISTRY_PROXY_PASSWORD}
      TZ: ${TZ}
    volumes:
      - nfs_registry_conf:/etc/docker/registry
      - nfs_registry_data:/var/lib/registry
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.registry.rule=Host(`registry.${DOMAIN_SWARM}`,`registry.${DOMAIN_EMERGENCY}`)
        - traefik.http.routers.registry.entrypoints=websecure
        - traefik.http.routers.registry.service=registry
        - traefik.http.routers.registry.middlewares=cors-headers@file,normal-chain@file # registryui访问需要CORS标头
        - traefik.http.services.registry.loadbalancer.server.port=5000
        - homepage.group=Storage
        - homepage.name=Docker Registry
        - homepage.icon=docker.png
        - homepage.description=Docker仓库
        - homepage.ping=registry
        - homepage.weight=10
      <<: [*deploy-common-ref,*placement-default-ref]
    logging:
      driver: fluentd
      options:
        tag: docker.storage.registry
        fluentd-async-connect: "true"

  # ------------------------------------------------------------
  # Docker私有库Manager
  # ------------------------------------------------------------
  registryadmin:
    image: snagles/docker-registry-manager:latest
    command: ["/app/app", "-r", "/app/conf/registries.yml"]
    <<: *service-common-ref
    environment:
      MANAGER_PORT: 8080
      # NFS挂载卷不支持文件映射，只支持目录映射
      # 通过命令行更改/app/registries.yml的默认位置为/app/conf/registries.yml
      #- MANAGER_REGISTRIES=/app/conf/registries.yml
      MANAGER_LOG_LEVEL: warn
      TZ: ${TZ}
    volumes:
      - nfs_registryadmin:/app/conf
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.registryadmin.rule=Host(`registryadmin.${DOMAIN_SWARM}`,`registryadmin.${DOMAIN_EMERGENCY}`)
        - traefik.http.routers.registryadmin.entrypoints=websecure
        - traefik.http.routers.registryadmin.service=registryadmin
        - traefik.http.routers.registryadmin.middlewares=auth,normal-chain@file
        - traefik.http.services.registryadmin.loadbalancer.server.port=8080
        - homepage.group=Storage
        - homepage.name=Docker Registry Admin
        - homepage.icon=docker.png
        - homepage.href=https://registryadmin.${DOMAIN_SWARM}:${EXTERNAL_PORT}/
        - homepage.description=Docker仓库管理
        - homepage.siteMonitor=http://registryadmin:8080
        - homepage.weight=11
      <<: [*deploy-common-ref,*placement-default-ref]
    logging:
      driver: fluentd
      options:
        tag: docker.storage.registryadmin
        fluentd-async-connect: "true"

  # ------------------------------------------------------------
  # Docker私有库UI
  # ------------------------------------------------------------
  registryui:
    image: joxit/docker-registry-ui:latest
    <<: *service-common-ref
    environment:
      REGISTRY_URL: https://registry.${DOMAIN_SWARM}:${EXTERNAL_PORT}
      DELETE_IMAGES: "true"
      REGISTRY_TITLE: Swarm Registry
      SINGLE_REGISTRY: "false"
      TAGLIST_ORDER: alpha-asc;num-desc
      NGINX_PROXY_PASS_URL: http://registry:5000
      TZ: ${TZ}
    # volumes:
      # Portainer Stack生成的容器环境变量有问题，无法正确更新90-docker-registry-ui.sh
      # 挂载卷用以手工替换/docker-entrypoint.d/90-docker-registry-ui.sh中的环境变量
      # - nfs_registryui:/docker-entrypoint.d
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.registryui.rule=Host(`registryui.${DOMAIN_SWARM}`,`registryui.${DOMAIN_EMERGENCY}`)
        - traefik.http.routers.registryui.entrypoints=websecure
        - traefik.http.routers.registryui.service=registryui
        - traefik.http.routers.registryui.middlewares=auth,normal-chain@file
        - traefik.http.services.registryui.loadbalancer.server.port=80
        - homepage.group=Storage
        - homepage.name=Docker Registry UI
        - homepage.icon=docker.png
        - homepage.href=https://registryui.${DOMAIN_SWARM}:${EXTERNAL_PORT}/
        - homepage.description=Docker仓库UI
        - homepage.siteMonitor=http://registryui:80
        - homepage.weight=12
      <<: [*deploy-common-ref,*placement-default-ref]
    logging:
      driver: fluentd
      options:
        tag: docker.storage.registryui
        fluentd-async-connect: "true"

  # ------------------------------------------------------------
  # Docker私有库前端
  # ------------------------------------------------------------
  registryfrontend:
    image: konradkleine/docker-registry-frontend:v2
    <<: *service-common-ref
    environment:
      ENV_DOCKER_REGISTRY_HOST: registry
      ENV_DOCKER_REGISTRY_PORT: 5000
      ENV_REGISTRY_PROXY_FQDN: registry.${DOMAIN_SWARM}
      ENV_REGISTRY_PROXY_PORT: 4
      # ENV_USE_SSL: yes
      ENV_DEFAULT_REPOSITORIES_PER_PAGE: 100
      ENV_DEFAULT_TAGS_PER_PAGE: 100
      TZ: ${TZ}
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.registryfrontend.rule=Host(`registryfrontend.${DOMAIN_SWARM}`,`registryfrontend.${DOMAIN_EMERGENCY}`)
        - traefik.http.routers.registryfrontend.entrypoints=websecure
        - traefik.http.routers.registryfrontend.service=registryfrontend
        - traefik.http.routers.registryfrontend.middlewares=auth,normal-chain@file
        - traefik.http.services.registryfrontend.loadbalancer.server.port=80
        - homepage.group=Storage
        - homepage.name=Docker Registry Frontend
        - homepage.icon=docker.png
        - homepage.href=https://registryfrontend.${DOMAIN_SWARM}:${EXTERNAL_PORT}/repositories
        - homepage.description=Docker仓库前端
        - homepage.siteMonitor=http://registryfrontend:80
        - homepage.weight=13
      <<: [*deploy-common-ref,*placement-default-ref]
    logging:
      driver: fluentd
      options:
        tag: docker.storage.registryfrontend
        fluentd-async-connect: "true"

  # ------------------------------------------------------------
  # CookieCloud 同步库
  # ------------------------------------------------------------
  cookiecloud:
    image: easychen/cookiecloud:latest
    <<: *service-common-ref
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.cookiecloud.rule=Host(`cookiecloud.${DOMAIN_SWARM}`,`cookiecloud.${DOMAIN_EMERGENCY}`)
        - traefik.http.routers.cookiecloud.entrypoints=websecure
        - traefik.http.routers.cookiecloud.service=cookiecloud
        - traefik.http.routers.cookiecloud.middlewares=normal-chain@file
        - traefik.http.services.cookiecloud.loadbalancer.server.port=8088
        - homepage.group=Storage
        - homepage.name=Cookie Cloud
        - homepage.icon=google-compute-engine.png
        - homepage.description=Cookie Cloud
        - homepage.ping=cookiecloud
        - homepage.weight=20
      <<: [*deploy-common-ref,*placement-default-ref]
    logging:
      driver: fluentd
      options:
        tag: docker.storage.cookiecloud
        fluentd-async-connect: "true"

networks:
  network_cluster:
    external: true

volumes:
  nfs_vaultwarden:
    driver: local
    driver_opts:
      <<: *driver-common-ref
      device: :${NFS_DEVICE}/storage/vaultwarden/data
  nfs_registry_conf:
    driver: local
    driver_opts:
      <<: *driver-common-ref
      device: :${NFS_DEVICE}/storage/registry/conf
  nfs_registry_data:
    driver: local
    driver_opts:
      <<: *driver-common-ref
      device: :${NFS_DEVICE}/storage/registry/data
  nfs_registryadmin:
    driver: local
    driver_opts:
      <<: *driver-common-ref
      device: :${NFS_DEVICE}/storage/docker-registry-manager/conf
  nfs_registryui:
    driver: local
    driver_opts:
      <<: *driver-common-ref
      device: :${NFS_DEVICE}/storage/docker-registry-ui/sh
...